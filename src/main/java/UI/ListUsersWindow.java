package UI;

import Backend.PasswordUtils;
import Backend.UserContext;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;
import java.awt.*;
import java.util.ArrayList;
import java.util.List;

public class ListUsersWindow {
    private JPanel listUsersPanel;
    private JCheckBox passwordIsAllowed;
    private JCheckBox userIsBlocked;
    private JButton blockAllButton;
    private JButton enablePasswordLimit;
    private JList usersList;
    private JButton saveButton;
    private JLabel passwordLengthLabel;
    private JLabel userNameLabel;

    private DefaultListModel<UserContext> listModel = new DefaultListModel<>();

    private List<UserContext> contextList = new ArrayList<>(PasswordUtils.PASSWORDS.values());

    ListUsersWindow() {
        usersList.addListSelectionListener(listSelectionEvent -> {
            int selectedIndex = usersList.getSelectedIndex();
            if (selectedIndex != -1) {
                UserContext context = contextList.get(selectedIndex);
                setContext(context);
            }
        });
        saveButton.addActionListener(actionEvent -> {
            int selectedIndex = usersList.getSelectedIndex();
            if (selectedIndex != -1) {
                UserContext context = contextList.get(selectedIndex);
                saveContext(context, selectedIndex);
            }
        });
        blockAllButton.addActionListener(actionEvent -> {
            contextList.forEach(userContext -> {
                if (!userContext.getUserName().equals(PasswordUtils.ADMIN_NAME)) {
                    userContext.setBlocked(true);
                }
            });
            PasswordUtils.PASSWORDS.values().forEach(userContext -> {
                if (!userContext.getUserName().equals(PasswordUtils.ADMIN_NAME)) {
                    userContext.setBlocked(true);
                }
            });

            int selectedIndex = usersList.getSelectedIndex();
            if (selectedIndex != -1) {
                UserContext context = contextList.get(selectedIndex);
                if (!context.getUserName().equals(PasswordUtils.ADMIN_NAME)) {
                    userIsBlocked.setSelected(true);
                }
            }
        });
        enablePasswordLimit.addActionListener(actionEvent -> {
            contextList.forEach(userContext -> {
                if (!userContext.getUserName().equals(PasswordUtils.ADMIN_NAME)) {
                    userContext.setPasswordAllowed(true);
                }
            });
            PasswordUtils.PASSWORDS.values().forEach(userContext -> {
                if (!userContext.getUserName().equals(PasswordUtils.ADMIN_NAME)) {
                    userContext.setPasswordAllowed(true);
                }
            });

            int selectedIndex = usersList.getSelectedIndex();
            if (selectedIndex != -1) {
                UserContext context = contextList.get(selectedIndex);
                if (!context.getUserName().equals(PasswordUtils.ADMIN_NAME)) {
                    passwordIsAllowed.setSelected(true);
                }
            }
        });
    }

    JPanel getListUsersPanel() {
        return listUsersPanel;
    }

    private void setContext(UserContext context) {
        passwordIsAllowed.setSelected(context.isPasswordLimited());
        userIsBlocked.setSelected(context.isBlocked());
        passwordLengthLabel.setText(String.format(" : %d", context.getMinimumPasswordLength()));
        if (context.getUserName().equals(PasswordUtils.ADMIN_NAME)) {
            userIsBlocked.setEnabled(false);
            passwordIsAllowed.setEnabled(false);
        } else {
            userIsBlocked.setEnabled(true);
            passwordIsAllowed.setEnabled(true);

        }
    }

    private void saveContext(UserContext context, int selectedIndex) {
        UserContext userContext = new UserContext(context.getUserName(),
                context.getPassword(),
                userIsBlocked.isSelected(),
                passwordIsAllowed.isSelected(),
                context.getMinimumPasswordLength());
        PasswordUtils.PASSWORDS.put(context.getUserName(), userContext);
        contextList.get(selectedIndex).setBlocked(userIsBlocked.isSelected());
        contextList.get(selectedIndex).setPasswordAllowed(passwordIsAllowed.isSelected());
    }

    public void setUp() {
        contextList.forEach(listModel::addElement);
        usersList.setModel(listModel);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        listUsersPanel = new JPanel();
        listUsersPanel.setLayout(new GridLayoutManager(6, 5, new Insets(0, 0, 0, 0), -1, -1));
        passwordIsAllowed = new JCheckBox();
        passwordIsAllowed.setText("Password limit is on");
        listUsersPanel.add(passwordIsAllowed, new GridConstraints(1, 1, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        userIsBlocked = new JCheckBox();
        userIsBlocked.setText("Blocked");
        listUsersPanel.add(userIsBlocked, new GridConstraints(0, 1, 1, 4, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        enablePasswordLimit = new JButton();
        enablePasswordLimit.setText("Enable password limit for all");
        listUsersPanel.add(enablePasswordLimit, new GridConstraints(3, 1, 1, 4, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        listUsersPanel.add(scrollPane1, new GridConstraints(0, 0, 6, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        usersList = new JList();
        usersList.setSelectionMode(0);
        scrollPane1.setViewportView(usersList);
        final Spacer spacer1 = new Spacer();
        listUsersPanel.add(spacer1, new GridConstraints(5, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        passwordLengthLabel = new JLabel();
        passwordLengthLabel.setText("");
        listUsersPanel.add(passwordLengthLabel, new GridConstraints(1, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_VERTICAL, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        saveButton = new JButton();
        saveButton.setText("Save");
        listUsersPanel.add(saveButton, new GridConstraints(4, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        blockAllButton = new JButton();
        blockAllButton.setText("Block all");
        listUsersPanel.add(blockAllButton, new GridConstraints(2, 1, 1, 4, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return listUsersPanel;
    }

}
